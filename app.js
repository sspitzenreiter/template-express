//lib that loaded
const express = require('express');
const logging = require('morgan');
const fs = require('fs');
//Get config file. File location defined by variable or default name config.json
const {Sequelize} = require('sequelize');
const bodyParser = require('body-parser');
const winston = require('winston');
//express as a function
const app = express();
const path_main = require('path');
//Public Var
config = require(process.env.CONFIG_FILE);

/**folder routing
 * Add folder route here
 */
const routerIndex = require('./api/index');
/**DB Connection
 * line for DB con
 */
//MongoDB
// const dbpath = '//localhost/fatikom';
// mongoose.connect('mongodb:' + dbpath, {
//     useNewUrlParser: true,
//     useUnifiedTopology: true
// });
//SQL Base
//Redis


/**Log system
 * log will sending to the file,
 * so admin can access directly to the file
 * temporary hardcoded for folder 
 */
const path = path_main.join(__dirname, "api/logapi");
const fileName = '/access.log';
try {
    if (!fs.existsSync(path)) {
        fs.mkdirSync(path);
    }
} catch (err) {
    console.error(err);
}
var writeFile = fs.createWriteStream(path + fileName, { flags: 'a' });
app.use(logging('combined', { stream: writeFile }));

//Body-Parser using for catching body parser (just in case needed)

app.use(bodyParser.urlencoded({ extended: true, limit:'10mb' }));
app.use(bodyParser.json({
    limit:'10mb'
}))
/**CORS Avoidance.
 * Asterisk symbol(*) on Access-Control-Allow-Origin
 * should be replace with url for security issue.
 * Only GET, POST, PATCH, DELETE method for now,
 * can add with PUT or others for further.
 */
app.use((req, res, next) => {
    res.header('Access-Control-Allow-Origin', config.security.cors_origin);
    res.header(
        'Access-Control-Allow-Headers',
        'Origin, X-Requested-With, Content-Type, Accept, Authorization'
    );
    if (req.method === 'OPTIONS') {
        res.header(
            'Access-Control-Allow-Methods', 'GET, POST'
        );
        return res.status(200).json({});
    }
    next();
});
//Autogenerated logger for error and info
const logger = winston.createLogger({
    format:winston.format.json(),
    transports:[
        new winston.transports.File({filename:path+"/error.log", level:"error"}),
        new winston.transports.File({filename:path+"/info.log", level:"info"}),
    ]
})
/**route which should handle
 * Add route in here
 */
app.use('/attachments', express.static("public/files"));
app.use('/', routerIndex);


//Removed
// app.use('/jurusan', routerJurusan);
// app.use('/rombel', routerRombel);
// app.use('/pembelajaran', routerPembelajaran);
// app.use('/ppdb', routerPPDB);

//Handling incorrect url & db con error

app.use((req, res, next) => {
    var error = new Error('Not Found');
    error.status = 404;
    next(error);
});
//Catching error returned from router
app.use((error, req, res, next) => {
    console.log("Error");
    logger.error(error)
    res.status(error.status || 500);
    res.json({
        message: error.message
    });
});

//module export
module.exports = app;
